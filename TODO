Future posts
 * Metaclasses on metaclasses (Tower of metaclasses)
 * What is a class? (can't disassemble them)
 * When does a function bind? (do functions set in init bind? in new?)
 * What is the execution order of class definition, metaclass definition, and the __init__ and __new__ of each?
 * What is the evaluation order of __getattr__ and __getattribute__ for instances, classes, metaclasses, etc.?
 * What are the differences between list() and []? Example:
    >>> list([])
    []
    >>> list(('hi','bye'))
    ['hi', 'bye']
    >>> [[]]
    [[]]
 * Can't have a function act as a generator and normal function (via branch, etc.; can't return and yield in the same function.)
 * Can't inherit from code (types.CodeType).
 * partial eval/exec (exec is a function in Python3)
 * functools.update_wrapper sets code name to string? when it should be bytes? (according to Objects/codeobject.c)
 * Generator expressions vs list comprehensions: generator expressions get an extra closure
   * lambdas = [(lambda: i) for i in xrange(10)] vs. ((lambda: i) for i in xrange(10))
* Sorting a list of sets
   * the set is moved until there are no subsets to its right
 * Python has pretty strong types (stronger than Java), but there are some instances of weak typing
   * int->long automatic conversion
   * int->float coercion
* Garbage collect yourself (everything's ghostly! sys becomes None, etc.):
        """
        #this module is intended to enable placing the entire git repo
        #inside another git repo so it can be pulled/pushed from within
        #the using applications repo, enabling rapid development
        
        import os
        import sys
        import asf
        
        asf.DEFAULT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        sys.path.append(asf.DEFAULT_DIR)
        
        # comment out this line if you want to be garbage collected
        sys.modules['_do_not_import_asf'] = sys.modules['asf']
        sys.modules['asf'] = asf
        import pdb;pdb.set_trace()
        sys.modules['asf.asf'] = asf
        """

Tooling
 * Import in a doctest-like format
 * Make an executable regression test of all the posts